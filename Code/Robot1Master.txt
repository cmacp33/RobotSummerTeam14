#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <ESP32Servo.h>
#include <Wifi.h>
#include <esp_now.h>

//variables
#define IR_sideRight 22
#define IR_farRight 19
#define IR_right 8
#define IR_left 7
#define IR_farLeft 5
#define IR_sideLeft 10
#define IN1 13
#define IN2 15
#define IN3 21
#define IN4 20
#define MUX1 25
#define MUX2 26
#define MUX3 32
#define rotaryPin1 38
#define rotaryPin2 37
#define rotaryPin3 35
#define rotaryPin4 34
#define microswitch 9
#define limitSwitch 4
#define clawMovePin 2
#define servo1IN 27
#define servo2IN 33
#define clawIN1 12
#define clawIN2 14

//PWM setup
const int CH1 = 1;
const int CH2 = 2;
const int CH3 = 3;
const int CH4 = 4;
const int clawCH1 = 5;
const int clawCH2 = 6;
const int PWMRes = 12;
const int PWMFreq = 100;

//speed control
const double set_speed = 2048;
const double turn_speed = 1600;

//navigation
const int P = 25;
const int I = 0;
const int D = 0.5;
const int clicksToServe = 432;
int positionDifference = 10;
volatile int IRCounter = 0;
unsigned long prevTime = millis();
volatile bool lineFollowFlag = true;

//rotary
volatile int clickL;
volatile int clickR;
volatile int clickCounterL;
volatile int clickCounterR;
volatile int prevClickL;
volatile int prevClickR;

//claw
const int homeAngle = 100;
const int lettuceAngle = 138;
const int tomatoAngle = 136;
const int cheeseAngle = 94;
const int pattyAngle = 96;
const int topBunAngle = 98;
const int bottomBunAngle = 95;
const int plateAngle = 119;
const int fullRetract = 60;
volatile int currentAngle = homeAngle;
const unsigned long upTime = 3600;
const int updownSpeed = 2048;
const unsigned long foodDelay = 550;
const unsigned long plateDelay = 300;
const int servoSpeed = 150;
const int stopPW = 1500;
const int CWPW = 1300;
const int CCWPW = 1700;
Servo clawServo;
Servo pinionServo;

//LEDs
volatile bool LED7Flag = false;
volatile bool LED8Flag = false;

//MCU communication
uint8_t MAC[] = {0x64, 0xb7, 0x08, 0x9d, 0x66, 0x50}; //robot 1 recieving
//uint8_t MAC[] = {0x64, 0xb7, 0x08, 0x9c, 0x61, 0x44}; //robot 2 recieving
esp_now_peer_info_t peerInfo;
typedef struct flag{
  bool act;
} flag;
flag trigAction;
bool go;

//task handling
TaskHandle_t LEDHandle;

//functions

void startUp();
//flashes on reset

void shutDown();
//permanetly stops loop until reset

void stop();
//stops the driver wheels

void setSpeed(char left_motor, char right_motor, int speed_left, int speed_right);
//sets speed and direction for driver wheels

void turn(char direction);
//turns the driver wheels

void linefollow();
//follows line

double getError();
//locates position of IRs on the black tape

void goTo(int positionChange);
//goes from one line to another

void upTo(int upToClicks);
//moves up to counter

void backUp();
//goes back to main black line

void locateServeArea();
//goes to horizontal position of serving area

void moveToNextCounter(int positionChange, char firstTurn, char secondTurn, int upToClicks, bool fromStart);
//move from grabbing postion of one counter to grabbing position of another

void grab(String food);
//grabs food or plate

void release();
//releases food or plate from claw

void cook();
//holds food on stove for 10 seconds

void manualClawMove();
//manually moves claw up or down

void moveClawHeight(char direction, int time);
//moves claw up or down

void homePlatform();
//moves platform to home position

void movePlatform(String food);
//stacks food on platform

void grabFromPlatform();
//serve plate from platform

void stackOnPlatform(String food);
//stack food or plate on platform and retract platform

void IRCount();
//counts number of activations from wing IR sensors

void resetRotaryCount();
//resets rotary count

void clickCountLeft();
//counts rotary clicks on the left wheel

void clickCountRight();
//counts rotary clicks on the right wheel

void toggleLED(void *params);
//Toggles LED

void changeMUX(bool S0, bool S1, bool S2);
//change multiplexer gate

void sendFlag();
//sends flag to other robot

void onSend(const uint8_t *mac_addr, esp_now_send_status_t status);
//confirms sendFlag

void receiveFlag();
//holds action until flag is received

void onReceive(const uint8_t *mac, const uint8_t *incomingData, int message_length);
//confirms flag received

void makeCheesePlate();
//makes a cheese plate from starting position

void makeSalad();
//makes a salad from starting position

void makeDeluxeBurger();
//makes a deluxe cheeseburger from starting position

//set up

void setup() {
  
  Serial.begin(115200);

  attachInterrupt(digitalPinToInterrupt(IR_sideLeft), IRCount, HIGH);
  attachInterrupt(digitalPinToInterrupt(IR_sideRight), IRCount, HIGH);
  attachInterrupt(digitalPinToInterrupt(rotaryPin1), clickCountLeft, CHANGE);
  attachInterrupt(digitalPinToInterrupt(rotaryPin2), clickCountLeft, CHANGE);
  attachInterrupt(digitalPinToInterrupt(rotaryPin3), clickCountRight, CHANGE);
  attachInterrupt(digitalPinToInterrupt(rotaryPin4), clickCountRight, CHANGE);
  attachInterrupt(digitalPinToInterrupt(clawMovePin), manualClawMove, CHANGE);
  
  //input
  pinMode(IR_sideRight, INPUT_PULLUP);
  pinMode(IR_sideLeft, INPUT_PULLUP);
  pinMode(IR_farRight, INPUT_PULLUP);
  pinMode(IR_right, INPUT_PULLUP);
  pinMode(IR_left, INPUT_PULLUP);
  pinMode(IR_farLeft, INPUT_PULLUP);
  pinMode(rotaryPin1, INPUT_PULLUP);
  pinMode(rotaryPin2, INPUT_PULLUP);
  pinMode(rotaryPin3, INPUT_PULLUP);
  pinMode(rotaryPin4, INPUT_PULLUP);
  pinMode(microswitch, INPUT_PULLDOWN);
  pinMode(clawMovePin, INPUT_PULLDOWN);

  //output
  pinMode(MUX1, OUTPUT);
  pinMode(MUX2, OUTPUT);
  pinMode(MUX3, OUTPUT);
  ledcSetup(CH1, PWMFreq, PWMRes);
  ledcSetup(CH2, PWMFreq, PWMRes);
  ledcSetup(CH3, PWMFreq, PWMRes);
  ledcSetup(CH4, PWMFreq, PWMRes);
  ledcSetup(clawCH1, PWMFreq, PWMRes);
  ledcSetup(clawCH2, PWMFreq, PWMRes);
  ledcAttachPin(IN1, CH1);
  ledcAttachPin(IN2, CH2);
  ledcAttachPin(IN3, CH3);
  ledcAttachPin(IN4, CH4);
  ledcAttachPin(clawIN1, clawCH1);
  ledcAttachPin(clawIN2, clawCH2);
  clawServo.attach(servo1IN);
  clawServo.write(fullRetract);
  pinionServo.attach(servo2IN);
  pinionServo.writeMicroseconds(stopPW);
  homePlatform();

  //communication
  WiFi.mode(WIFI_STA);
  if(esp_now_init() != ESP_OK){
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  memcpy(peerInfo.peer_addr, MAC, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  if(esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Error adding peer");
  }
  esp_now_register_send_cb(onSend);
  esp_now_register_recv_cb(esp_now_recv_cb_t(onReceive));

  //freeRTOS
  xTaskCreate(toggleLED, "toggleLED", 2048, NULL, 1, &LEDHandle);
  
}


//loop

void loop() {
  startUp();
  makeDeluxeBurger();
  shutDown();
}

//function definitions

void startUp(){
  LED8Flag = true;
  vTaskDelay(1000/ portTICK_PERIOD_MS);
  LED8Flag = false;
  vTaskDelay(1000/ portTICK_PERIOD_MS);
}

void shutDown(){
  stop();
  while(1){LED8Flag = true;}
}

void stop(){
  ledcWrite(CH1, 0);
  ledcWrite(CH2, 0);
  ledcWrite(CH3, 0);
  ledcWrite(CH4, 0);
}

void setSpeed(char left_motor, char right_motor, int speed_left, int speed_right){
  if(left_motor == 'f'){
    ledcWrite(CH1, constrain(speed_left, 0, (1 << 12) - 1));
    ledcWrite(CH2, 0);
  } else if (left_motor == 'b'){
    ledcWrite(CH1, 0);
    ledcWrite(CH2, constrain(speed_left, 0, (1 << 12) - 1));
  }
  if(right_motor == 'f'){
    ledcWrite(CH3, constrain(speed_right, 0, (1 << 12) - 1));
    ledcWrite(CH4, 0);
  } else if (right_motor == 'b'){
    ledcWrite(CH3, 0);
    ledcWrite(CH4, constrain(speed_right, 0, (1 << 12) - 1));
  }
}

void turn(char direction){
  LED7Flag = true;
  while(clickCounterL <= 72){
    if(direction == 'l'){
    setSpeed('b', 'f', set_speed, set_speed);
    } else if(direction == 'r'){
    setSpeed('f', 'b', set_speed, set_speed);
    }
  }
  stop();
  LED7Flag = false;
}

void linefollow(){
  unsigned long previous_time = millis(), current_time;
  double previous_error = 0, error_sum = 0, error_difference = 0, error, PID;
  while(lineFollowFlag){
    error = getError();
    while(getError() == -10){
      stop();
    }
    current_time = millis();
    error_sum += error * (current_time - previous_time);
    error_difference = current_time - previous_time != 0 ? (error - previous_error) / (current_time - previous_time) : 0;
    PID = P * error + I * error_sum + D * error_difference;
    previous_error = error;
    previous_time = current_time;
    setSpeed('f', 'f', set_speed + PID, set_speed - PID);
    
  }
 lineFollowFlag = true;
}

double getError(){
  int farLeftIR_reading = digitalRead(IR_farLeft);
  int leftIR_reading = digitalRead(IR_left);
  int rightIR_reading = digitalRead(IR_right);
  int farRightIR_reading = digitalRead(IR_farRight);
  int bitSum = 8 * farLeftIR_reading + 4 * leftIR_reading + 2 * rightIR_reading + 1 * farRightIR_reading;
  switch(bitSum){
    case 0: return -10; break;
    case 8: return 4; break;
    case 12: return 3; break;
    case 14: return 2; break;
    case 4: return 1; break;
    case 6: return 0; break;
    case 2: return -1; break;
    case 7: return -2; break;
    case 3: return -3; break;
    case 1: return -4; break;
    case 15: return -10; break;
    default: {
      LED7Flag = true;
      return 0;
    }
  }
}

void goTo(int positionChange){
  LED7Flag = true;
  IRCounter = 0;
  positionDifference = positionChange;
  linefollow();
  lineFollowFlag = true;
  setSpeed('b','b',set_speed, set_speed);
  vTaskDelay(250 / portTICK_PERIOD_MS);
  stop();
  LED7Flag = false;
}

void upTo(int upToClicks){
  while(clickCounterL <= upToClicks){
    linefollow();
  }
  setSpeed('b','b',set_speed, set_speed);
  vTaskDelay(250 / portTICK_PERIOD_MS);
  stop();
}

void backUp(){
  LED7Flag = true;
  bool IR_sideLeftFlag = false, IR_sideRightFlag = false, exit = false;
  while(!exit){
    setSpeed('b','b',set_speed, set_speed);
    if(digitalRead(IR_sideLeft)){
      IR_sideLeftFlag = true;
    }
    if(digitalRead(IR_sideRight)){
      IR_sideRightFlag = true;
    }
    if(IR_sideLeftFlag == true && IR_sideRightFlag == true){
      exit = true;
    }
  }
  setSpeed('f','f',set_speed, set_speed);
  vTaskDelay(250 / portTICK_PERIOD_MS);
  stop();
  LED7Flag = false;
}

void locateServeArea(){
  LED7Flag = true;
  while(clickCounterL <= clicksToServe){
    linefollow();
  }
  setSpeed('b','b',set_speed, set_speed);
  vTaskDelay(250 / portTICK_PERIOD_MS);
  stop();
  LED7Flag = false;
}

void moveToNextCounter(int positionChange, char firstTurn, char secondTurn, int upToClicks, bool fromStart){
  if (!fromStart) {
    backUp();
    turn(firstTurn);
  }
  goTo(positionChange);
  turn(secondTurn);
  upTo(upToClicks);
}

void grab(String food){
  LED7Flag = true;
  int finalAngle;
  if(food == "lettuce"){
    finalAngle = lettuceAngle;
  } else if (food == "tomato"){
    finalAngle = tomatoAngle;
  } else if (food == "patty"){
    finalAngle = pattyAngle;
  } else if (food == "topbun"){
    finalAngle = topBunAngle;
  } else if (food == "bottombun"){
    finalAngle = bottomBunAngle;
  }else if (food == "cheese"){
    finalAngle = cheeseAngle; 
  } else if (food == "plate"){
    finalAngle = plateAngle;
  }
 
  for(int i = currentAngle; i >= homeAngle; i--){
    clawServo.write(i);
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
  currentAngle = homeAngle;

  while(!digitalRead(microswitch)){
    moveClawHeight('d', 250);
  }
  ledcWrite(clawCH2, 0);

  for(int i = currentAngle; i <= finalAngle; i++){
    clawServo.write(i);
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
  currentAngle = finalAngle;

  moveClawHeight('u',upTime);

  LED7Flag = false;
}

void release(){
  for(int i = currentAngle; i >= homeAngle; i--){
    clawServo.write(i);
    vTaskDelay(10 / portTICK_PERIOD_MS);
  }
  currentAngle = homeAngle;
}

void cook(){
  LED7Flag = true;
  while(!digitalRead(microswitch)){
    moveClawHeight('d', 250);
  }
  vTaskDelay(10000 / portTICK_PERIOD_MS);
  moveClawHeight('u', upTime);
}

void manualClawMove(){
  while(digitalRead(clawMovePin)){
    if(!digitalRead(microswitch)){
      moveClawHeight('u', 100);
    }
    if(digitalRead(microswitch)){
      moveClawHeight('d', 100);
    }
  }
}

void moveClawHeight(char direction, int time){
  if(direction == 'u'){
      ledcWrite(clawCH1, updownSpeed);
      ledcWrite(clawCH2, 0);
    }
    if(direction == 'd'){
      ledcWrite(clawCH1, 0);
      ledcWrite(clawCH2, updownSpeed);
    }
    vTaskDelay(time/portTICK_PERIOD_MS);
    ledcWrite(clawCH2, 0);
    ledcWrite(clawCH1, 0);
  }

void homePlatform() {
  while(!digitalRead(limitSwitch)){
    pinionServo.writeMicroseconds(CWPW);
    vTaskDelay(100/portTICK_PERIOD_MS);
  }
  pinionServo.writeMicroseconds(stopPW);
  vTaskDelay(100/portTICK_PERIOD_MS);
  pinionServo.writeMicroseconds(CCWPW);
  vTaskDelay(50/portTICK_PERIOD_MS);
  pinionServo.writeMicroseconds(stopPW);
  vTaskDelay(3000/portTICK_PERIOD_MS);
}

void movePlatform(String food){
  while(!digitalRead(limitSwitch)){
    pinionServo.writeMicroseconds(CWPW);
    vTaskDelay(100/portTICK_PERIOD_MS);
  }
  if(food != "plate"){
    pinionServo.writeMicroseconds(CCWPW);
    vTaskDelay(foodDelay/portTICK_PERIOD_MS);
    pinionServo.writeMicroseconds(stopPW);
  } else if (food == "plate"){
    pinionServo.writeMicroseconds(CCWPW);
    vTaskDelay(plateDelay/portTICK_PERIOD_MS);
    pinionServo.writeMicroseconds(stopPW);
  }
}

void grabFromPlatform() {
  movePlatform("plate");
  grab("plate");
  homePlatform();
}

void stackOnPlatform(String food) {
  movePlatform(food);
  release();
  homePlatform();
}

void IRCount(){
  unsigned long timeSinceLast = millis() - prevTime;
  if(((digitalRead(IR_sideLeft) == HIGH || digitalRead(IR_sideRight)) == HIGH) && timeSinceLast > 750){
    IRCounter++;
    prevTime = millis();
    if(IRCounter == positionDifference){
      lineFollowFlag = false;
    }
  }
}

void resetRotaryCount(){
  clickCounterL = 0;
  prevClickL = 0;
  clickCounterR = 0;
  prevClickR = 0;
}

void clickCountLeft(){
  clickL = 2 * digitalRead(rotaryPin1) + 1 * digitalRead(rotaryPin2);
  if(clickL == 1 && prevClickL == 3 || clickL == 0 && prevClickL == 1 ||
   clickL == 2 && prevClickL == 0 || clickL == 3 && prevClickL == 2){
    clickCounterL--;
   } else if (clickL == 3 && prevClickL == 1 || clickL == 2 && prevClickL == 3 ||
   clickL == 0 && prevClickL == 2 || clickL == 1 && prevClickL == 0){
    clickCounterL++;
   }
  prevClickL = clickL;
}

void clickCountRight(){
  clickR = 2 * digitalRead(rotaryPin3) + 1 * digitalRead(rotaryPin4);
  if(clickR == 1 && prevClickR == 3 || clickR == 0 && prevClickR == 1 ||
   clickR == 2 && prevClickR == 0 || clickR == 3 && prevClickR == 2){
    clickCounterR--;
   } else if (clickR == 3 && prevClickR == 1 || clickR == 2 && prevClickR == 3 ||
   clickR == 0 && prevClickR == 2 || clickR == 1 && prevClickR == 0){
    clickCounterR++;
   }
  prevClickR = clickR;
}

void toggleLED(void *params){
  while(1) { 
    if (digitalRead(IR_farRight)) {
      changeMUX(0, 0, 0);
      vTaskDelay(1 / portTICK_PERIOD_MS);
    }
    if (digitalRead(IR_right)) {
      changeMUX(0, 1, 0);
      vTaskDelay(1 / portTICK_PERIOD_MS);
    }
    if (digitalRead(IR_left)) {
      changeMUX(0, 0, 1);
      vTaskDelay(1 / portTICK_PERIOD_MS);
    }
    if (digitalRead(IR_farLeft)) {
      changeMUX(0, 1, 1);
      vTaskDelay(1 / portTICK_PERIOD_MS);
    }
    if (digitalRead(IR_sideLeft)) {
      changeMUX(1, 0, 1);
      vTaskDelay(1 / portTICK_PERIOD_MS);
    }
    if (digitalRead(IR_sideRight)) {
      changeMUX(1, 0, 0);
      vTaskDelay(1 / portTICK_PERIOD_MS);
    }
    if (LED7Flag) {
      changeMUX(1, 1, 0);
      vTaskDelay(1 / portTICK_PERIOD_MS);
    }
    if (LED8Flag){
      changeMUX(1, 1, 1);
      vTaskDelay(1 / portTICK_PERIOD_MS);
    }
    vTaskDelay(5 / portTICK_PERIOD_MS);   
  }
}

void changeMUX(bool S0, bool S1, bool S2){
  digitalWrite(MUX1, S0);
  digitalWrite(MUX2, S1);
  digitalWrite(MUX3, S2);
}

void sendFlag(){
  trigAction.act = true;
  esp_err_t result = esp_now_send(MAC, (uint8_t*) &trigAction, sizeof(trigAction));
  if(result == ESP_OK){
    Serial.println("sent");
  } else {
    Serial.println("sendFlag fail");
  }
}

void onSend(const uint8_t *mac_addr, esp_now_send_status_t status){
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Success" : "Fail");
}

void receiveFlag(){
  go = false;
  while(!go){}
}

void onReceive(const uint8_t *mac, const uint8_t *incomingData, int message_length){
  memcpy(&trigAction, incomingData, sizeof(trigAction));
  go = true;
}

void makeCheesePlate(){
  moveToNextCounter(1,'n','r', 192, true);
  grab("cheese");
  moveToNextCounter(3,'l','l', 76, false);
  release();
  backUp();
  turn('l');
  goTo(1);
  locateServeArea();
  moveToNextCounter(0,'n','l', 192, false);
  release();
}

void makeSalad(){
  moveToNextCounter(1,'n','l', 212, true);
  grab("tomato");
  moveToNextCounter(3,'r','l', 76, false);
  release();
  stackOnPlatform("plate");
  moveToNextCounter(0,'l','l', 216, false);
  grab("lettuce");
  stackOnPlatform("food");
  backUp();
  turn('l');
  goTo(1);
  locateServeArea();
  grabFromPlatform();
  moveToNextCounter(0,'n','l', 192, false);
  release();
}

void makeDeluxeBurger(){
  //robot1
  moveToNextCounter(1,'n','l', 212, true);
  grab("tomato");
  moveToNextCounter(0,'r','r', 192, false);
  release();
  grab("cheese");
  moveToNextCounter(3,'r','l', 0, false);
  receiveFlag();
  upTo(76);
  release();
  moveToNextCounter(0,'l','l', 216, false);
  grab("lettuce");
  moveToNextCounter(0,'r','r', 76, false);
  release();
  backUp();
  receiveFlag();
  upTo(76);
  grab("plate");
  turn('l');
  goTo(1);
  locateServeArea();
  moveToNextCounter(0,'n','l', 192, false);
  release();
}